

// faster and shorter
$enum.class.getEnumConstants() :: $enum instanceof Enum =>
$enum.values()
;;

"Remove unessesary null check before instanceof.":
$a != null && $a instanceof $A =>
$a instanceof $A
;;

// shorter null check
if ($o == null) {
    throw new NullPointerException($msg$);
}
=>
java.util.Objects.requireNonNull($o, $msg$);
;;

// TODO: doesn't work, jackpot ignores the body. bug?
/*
if ($o != null) {
$body$;
} else {
    throw new NullPointerException($msg$);
}
=>
java.util.Objects.requireNonNull($o, $msg$);
$body$;
;;
*/

// shorter equals
$obj != null ? $obj.equals($other) : $other == null =>
java.util.Objects.equals($obj, $other)
;;

$obj != null ? !$obj.equals($other) : $other != null =>
!java.util.Objects.equals($obj, $other)
;;

($obj == $other) || ($obj != null && $obj.equals($other)) =>
java.util.Objects.equals($obj, $other)
;;

($obj != $other) || ($obj != null && !$obj.equals($other)) =>
!java.util.Objects.equals($obj, $other)
;;


// 10+
// does what it says
$o.get() :: $o instanceof java.util.Optional && sourceVersionGE(10) =>
$o.orElseThrow()
;;

// 11+
!$o.isPresent() :: $o instanceof java.util.Optional && sourceVersionGE(11) =>
$o.isEmpty()
;;

!$o.isEmpty() :: $o instanceof java.util.Optional =>
$o.isPresent()
;;

// 11+
// similar performance, strip is unicode aware, trim is not.
$str.trim() :: $str instanceof java.lang.String && sourceVersionGE(11) =>
$str.strip()
;;

// currently compiles into invokedynamic / makeConcatWithConstants
// valueOf is more direct, needs no warmup and has specialized variants.
// javac RFE https://bugs.openjdk.java.net/browse/JDK-8276951
"" + $val =>
String.valueOf($val)
;;

$val + "" =>
String.valueOf($val)
;;

$str.substring($begin, $end).indexOf($other) + $begin :: $str instanceof String && $begin instanceof int && $end instanceof int && sourceVersionGE(21) =>
$str.indexOf($other, $begin, $end)
;;

/* TODO: doesn't work unless there is a way to create constants
"extract Pattern constant.":
$str.matches($regex) :: $str instanceof java.lang.String && $regex instanceof java.lang.String =>
final java.util.regex.Pattern pattern = java.util.regex.Pattern.compile($regex);
pattern.matcher($str).matches()
;;
*/

// shorter toString()
$o != null ? $o.toString() : $default =>
java.util.Objects.toString($o, $default)
;;
$o == null ? $default : $o.toString() =>
java.util.Objects.toString($o, $default)
;;

System.getProperty("line.separator") =>
System.lineSeparator()
;;

System.getProperty("file.separator") =>
java.io.File.separator
;;

System.getProperty("path.separator") =>
java.io.File.pathSeparator
;;

System.getProperty("java.runtime.version") :: sourceVersionGE(9) =>
Runtime.version().toString()
;;

System.getProperty("java.specification.version") :: sourceVersionGE(10) =>
Runtime.version().feature()
;;

// no exact match unfortunately since it contains optional values
System.getProperty("java.version") :: sourceVersionGE(9) =>
Runtime.version().toString()
;;

System.getProperty("java.class.version") :: sourceVersionGE(20) =>
java.lang.reflect.ClassFileFormatVersion.latest().major()
;;


"URL.equals() resolves the host and compares the target, this is a blocking operation. Consider comparing URIs or Strings instead.":
$url1.equals($url2) :: $url1 instanceof java.net.URL && $url2 instanceof java.net.URL;;


java.util.StringJoiner $joiner = new java.util.StringJoiner($delim);
for (String $s : $iter) {
    $joiner.add($s);
}
String $joined = $joiner.toString();
=>
String $joined = String.join($delim, $iter);
;;


/* todo: should be a hint but no warning

"use Long::hashCode for better hash code distribution.":
$anno$ public int hashCode() {
    return (int) $id;
} :: $id instanceof long && elementKindMatches($id, ElementKind.FIELD)
=>
$anno$ public int hashCode() {
    return Long.hashCode($id);
}
;;
*/

// code style
/*
for (int $i = $s; $i < $n; ++$i) {
    $body$;
}
=>
for (int $i = $s; $i < $n; $i++) {
    $body$;
}
;;
*/
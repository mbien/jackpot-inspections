<?
import org.netbeans.modules.java.hints.declarative.APIAccessor;
import java.math.RoundingMode;

import com.sun.source.tree.*;
import com.sun.source.tree.Tree.Kind;
import com.sun.source.util.TreePath;
import com.sun.tools.javac.tree.*;
?>

// deprecated in 9 (but rule is valid since 8)
$class.newInstance() :: $class instanceof Class =>
$class.getDeclaredConstructor().newInstance()
;;

// 7
$f.toURL() :: $f instanceof java.io.File =>
$f.toURI().toURL()
;;

// avoid Hashtable methods since doc requires Strings in Properties
// putting Objects into it could lead to bugs
$props.put($key, $value) :: $props instanceof java.util.Properties =>
$props.setProperty($key, $value)
;;

(String) $props.get($key) :: $props instanceof java.util.Properties =>
$props.getProperty($key)
;;

// JFrame methods deprecated in 5
$f.show($b$) :: $f instanceof javax.swing.JFrame =>
$f.setVisible($b$);
;;

$f.hide() :: $f instanceof javax.swing.JFrame =>
$f.setVisible(false);
;;

// deprecated in 10
Runtime.version().major() :: sourceVersionGE(10) =>
Runtime.version().feature()
;;

Runtime.version().minor() :: sourceVersionGE(10) =>
Runtime.version().interim()
;;

Runtime.version().security() :: sourceVersionGE(10) =>
Runtime.version().update()
;;

// semi-deprecated since 11
java.nio.file.Paths.get($first, $more$) :: $first instanceof String && sourceVersionGE(11) =>
java.nio.file.Path.of($first, $more$)
;;

java.nio.file.Paths.get($uri) :: $uri instanceof java.net.URI && sourceVersionGE(11) =>
java.nio.file.Path.of($uri)
;;

// TODO: import RoundingMode somehow

// BigDecimal method deprecations in 9 -> RoundingMode enum (rule valid since 5+)
$bd.setScale($s, $mode) :: $bd instanceof java.math.BigDecimal && $s instanceof int && $mode instanceof int =>
$bd.setScale($s, $enum) :: flag2Enum($mode, $enum)
;;

$bd.divide($bd2, $mode) :: $bd instanceof java.math.BigDecimal && $bd2 instanceof java.math.BigDecimal && $mode instanceof int =>
$bd.divide($bd2, $enum) :: flag2Enum($mode, $enum)
;;

$bd.divide($bd2, $s, $mode) :: $bd instanceof java.math.BigDecimal && $bd2 instanceof java.math.BigDecimal && $s instanceof int && $mode instanceof int =>
$bd.divide($bd2, $s, $enum) :: flag2Enum($mode, $enum)
;;


// since 16 (valid since 9)
jdk.net.Sockets.getOption($socket, $opt) :: $socket instanceof java.net.DatagramSocket && $opt instanceof java.net.SocketOption && sourceVersionGE(9) =>
$socket.getOption($opt)
;;

jdk.net.Sockets.getOption($socket, $opt) :: $socket instanceof java.net.ServerSocket && $opt instanceof java.net.SocketOption && sourceVersionGE(9) =>
$socket.getOption($opt)
;;

jdk.net.Sockets.getOption($socket, $opt) :: $socket instanceof java.net.Socket && $opt instanceof java.net.SocketOption && sourceVersionGE(9) =>
$socket.getOption($opt)
;;


jdk.net.Sockets.setOption($socket, $opt, $v) :: $socket instanceof java.net.DatagramSocket && $opt instanceof java.net.SocketOption && sourceVersionGE(9) =>
$socket.setOption($opt, $v)
;;

jdk.net.Sockets.setOption($socket, $opt, $v) :: $socket instanceof java.net.ServerSocket && $opt instanceof java.net.SocketOption && sourceVersionGE(9) =>
$socket.setOption($opt, $v)
;;

jdk.net.Sockets.setOption($socket, $opt, $v) :: $socket instanceof java.net.Socket && $opt instanceof java.net.SocketOption && sourceVersionGE(9) =>
$socket.setOption($opt, $v)
;;


// since 14 (valid since 9)
$socket.getLoopbackMode() :: $socket instanceof java.net.MulticastSocket && sourceVersionGE(9) =>
$socket.getOption(java.net.StandardSocketOptions.IP_MULTICAST_LOOP)
;;

$socket.setLoopbackMode($b):: $socket instanceof java.net.MulticastSocket && $b instanceof boolean && sourceVersionGE(9) =>
$socket.setOption(java.net.StandardSocketOptions.IP_MULTICAST_LOOP, $b)
;;


// since 17

// todo: doesn't work, body is not captured
/*
java.security.AccessController.doPrivileged(new java.security.PrivilegedAction<Void>() {

    public Void run() {
        $body$;
        return null;
    }
});
=>
$body$;
;;
*/


// 18+ (JEP 421) but applicable from 9+
"finalization is deprecated, consider try-with-resource or java.lang.ref.Cleaner.":
$rt.runFinalization(); :: $rt instanceof java.lang.Runtime && sourceVersionGE(9);;

"finalization is deprecated, consider try-with-resource or java.lang.ref.Cleaner.":
java.lang.System.runFinalization(); :: sourceVersionGE(9);;

"finalization is deprecated, consider try-with-resource or java.lang.ref.Cleaner.":
$mods$ void finalize() throws Throwable {$body$;} :: sourceVersionGE(9);;

"finalization is deprecated, consider try-with-resource or java.lang.ref.Cleaner.":
$obj.finalize(); :: sourceVersionGE(9);;


// 18+ but applicable from 1+
"automatic tokenizeng of the command is error prone, consider using array versions of this method or ProcessBuilder.":
$rt.exec($cmd) :: $rt instanceof java.lang.Runtime && $cmd instanceof String;;

"automatic tokenizeng of the command is error prone, consider using array versions of this method or ProcessBuilder.":
$rt.exec($cmd, $env) :: $rt instanceof java.lang.Runtime && $cmd instanceof String && $env instanceof String[];;

"automatic tokenizeng of the command is error prone, consider using array versions of this method or ProcessBuilder.":
$rt.exec($cmd, $env, $file) :: $rt instanceof java.lang.Runtime && $cmd instanceof String && $env instanceof String[] && $file instanceof java.io.File;;


// 19+
$thread.getId() :: $thread instanceof java.lang.Thread && sourceVersionGE(19) =>
$thread.threadId()
;;

new java.util.Locale($args$) :: sourceVersionGE(19) =>
java.util.Locale.of($args$)
;;


// 20+
"deprecated URL constructor could be potentially changed to the URI.toURL() replacement. Case-by-case revew required.":
new java.net.URL($s) :: $s instanceof String && sourceVersionGE(20) =>
new java.net.URI($s).toURL()
;;

"deprecated URL constructor could be potentially changed to the URI.toURL() replacement. Case-by-case revew required.":
new java.net.URL($proto, $host, $file) :: $proto instanceof String && $host instanceof String && $file instanceof String && sourceVersionGE(20) =>
new java.net.URI($proto, $host, $file, null).toURL()
;;
    
"deprecated URL constructor could be potentially changed to the URI.toURL() replacement. Case-by-case revew required.":
new java.net.URL($proto, $host, $port, $file) :: $proto instanceof String && $host instanceof String && $port instanceof int && $file instanceof String && sourceVersionGE(20) =>
new java.net.URI($proto, null, $host, $port, $file, null, null).toURL()
;;


<?
public boolean flag2Enum(Variable str, Variable target) throws Throwable {
    
    RoundingMode mode = getMatchingEnum(str);

    String value = "RoundingMode." + (mode != null ? mode.name() : "/*TODO*/");

    context.createRenamed(str, target, value);
    return true;
}
private RoundingMode getMatchingEnum(Variable str) throws Throwable {

    TreePath tp = APIAccessor.IMPL.getSingleVariable(context, str);

    Tree.Kind kind = tp.getLeaf().getKind();
    if (kind == Kind.INT_LITERAL) {
        try {
            return RoundingMode.valueOf(Integer.parseInt(tp.getLeaf().toString()));
        } catch (NumberFormatException ex) {
            return null;
        }
    } else if (kind == Kind.MEMBER_SELECT || kind == Kind.IDENTIFIER) { // TODO there is probably a way how to get values of constants
        String exp = tp.getLeaf().toString();

        int dot = exp.lastIndexOf('.');
        if (dot != -1) {
            exp = exp.substring(dot+1);
        }
        
        if (exp.startsWith("ROUND_")) {
            exp = exp.substring(6);
        }

        try {
            return RoundingMode.valueOf(exp.toUpperCase());
        } catch (IllegalArgumentException ex) {
            return null;
        }

    }
    return null;
}
?>

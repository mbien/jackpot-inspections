
<!description="Use comparison utilities.">

if ($a < $b) {
    return -1;
} else if ($a > $b) {
    return 1;
} else {
    return 0;
}
=>
return Byte.compare($a, $b); :: $a instanceof byte && $b instanceof byte
=>
return Short.compare($a, $b); :: $a instanceof short && $b instanceof short
=>
return Integer.compare($a, $b); :: $a instanceof int && $b instanceof int
=>
return Long.compare($a, $b); :: $a instanceof long && $b instanceof long
=>
return Float.compare($a, $b); :: $a instanceof float && $b instanceof float
=>
return Double.compare($a, $b); :: $a instanceof double && $b instanceof double
;;


if ($a < $b) {
    return -1;
} 
if ($a > $b) {
    return 1;
}
return 0;
=>
return Byte.compare($a, $b); :: $a instanceof byte && $b instanceof byte
=>
return Short.compare($a, $b); :: $a instanceof short && $b instanceof short
=>
return Integer.compare($a, $b); :: $a instanceof int && $b instanceof int
=>
return Long.compare($a, $b); :: $a instanceof long && $b instanceof long
=>
return Float.compare($a, $b); :: $a instanceof float && $b instanceof float
=>
return Double.compare($a, $b); :: $a instanceof double && $b instanceof double
;;



$a > $b ? 1 : $a == $b ? 0 : -1
=>
Byte.compare($a, $b) :: $a instanceof byte && $b instanceof byte
=>
Short.compare($a, $b) :: $a instanceof short && $b instanceof short
=>
Integer.compare($a, $b) :: $a instanceof int && $b instanceof int
=>
Long.compare($a, $b) :: $a instanceof long && $b instanceof long
=>
Float.compare($a, $b) :: $a instanceof float && $b instanceof float
=>
Double.compare($a, $b) :: $a instanceof double && $b instanceof double
;;

$a < $b ? -1 : $a == $b ? 0 : 1
=>
Byte.compare($a, $b) :: $a instanceof byte && $b instanceof byte
=>
Short.compare($a, $b) :: $a instanceof short && $b instanceof short
=>
Integer.compare($a, $b) :: $a instanceof int && $b instanceof int
=>
Long.compare($a, $b) :: $a instanceof long && $b instanceof long
=>
Float.compare($a, $b) :: $a instanceof float && $b instanceof float
=>
Double.compare($a, $b) :: $a instanceof double && $b instanceof double
;;


$T.compare($a, 0) :: $T instanceof Number
=>
Integer.signum($a) :: $a instanceof Byte
=>
Integer.signum($a) :: $a instanceof Short
=>
Integer.signum($a) :: $a instanceof Integer
=>
Long.signum($a) :: $a instanceof Long
=>
Math.signum($a) :: otherwise
;;

"could use compare(x, y)":
Byte.valueOf($x).compareTo(Byte.valueOf($y)) :: $x instanceof byte && $y instanceof byte =>
Byte.compare($x, $y);;

"could use compare(x, y)":
Short.valueOf($x).compareTo(Short.valueOf($y)) :: $x instanceof short && $y instanceof short =>
Short.compare($x, $y);;

"could use compare(x, y)":
Integer.valueOf($x).compareTo(Integer.valueOf($y)) :: $x instanceof int && $y instanceof int =>
Integer.compare($x, $y);;

"could use compare(x, y)":
Long.valueOf($x).compareTo(Long.valueOf($y)) :: $x instanceof long && $y instanceof long =>
Long.compare($x, $y);;

"could use compare(x, y)":
Float.valueOf($x).compareTo(Float.valueOf($y)) :: $x instanceof float && $y instanceof float =>
Float.compare($x, $y);;

"could use compare(x, y)":
Double.valueOf($x).compareTo(Double.valueOf($y)) :: $x instanceof double && $y instanceof double =>
Double.compare($x, $y);;

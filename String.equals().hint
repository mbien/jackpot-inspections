
<?
import org.netbeans.modules.java.hints.declarative.APIAccessor;
import javax.lang.model.element.ElementKind;
import com.sun.source.util.TreePath;
import com.sun.source.tree.Tree.Kind;
?>

<!description="Use String#equals() where applicable.">

// compareTo could be equals
$str1.compareTo($str2) == 0 :: $str1 instanceof String && $str2 instanceof String =>
$str1.equals($str2)
;;

$str1.compareTo($str2) != 0 :: $str1 instanceof String && $str2 instanceof String =>
!$str1.equals($str2)
;;

// could use equalsIgnoreCase
$str1.toLowerCase().equals($str2.toLowerCase()) :: $str1 instanceof String && $str2 instanceof String =>
$str1.equalsIgnoreCase($str2)
;;
$str1.toLowerCase().equals($str2) :: $str1 instanceof String && $str2 instanceof String && !matchesAny($str2, "$str.toLowerCase()") =>
$str1.equalsIgnoreCase($str2)
;;
$str1.equals($str2.toLowerCase()) :: $str1 instanceof String && $str2 instanceof String && !matchesAny($str1, "$str.toLowerCase()") =>
$str1.equalsIgnoreCase($str2)
;;

$str1.toUpperCase().equals($str2.toUpperCase()) :: $str1 instanceof String && $str2 instanceof String =>
$str1.equalsIgnoreCase($str2)
;;
$str1.toUpperCase().equals($str2) :: $str1 instanceof String && $str2 instanceof String && !matchesAny($str2, "$str.toUpperCase()") =>
$str1.equalsIgnoreCase($str2)
;;
$str1.equals($str2.toUpperCase()) :: $str1 instanceof String && $str2 instanceof String && !matchesAny($str1, "$str.toUpperCase()") =>
$str1.equalsIgnoreCase($str2)
;;

// null safe "foo".equals(foo)
$str1 != null && $str1.equals($str2) :: $str1 instanceof String && $str2 instanceof String && isStringLiteral($str2) =>
$str2.equals($str1)
;;

<?
private boolean isStringLiteral(Variable str) throws Throwable {
    if (ElementKind.FIELD.equals(context.elementKind(str))) { // todo
        return true;
    }
    TreePath tp = APIAccessor.IMPL.getSingleVariable(context, str);
    if (tp != null && tp.getLeaf().getKind() == Kind.STRING_LITERAL) {
        return true;
    }
    return false;
}
?>
